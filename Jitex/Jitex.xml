<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jitex</name>
    </assembly>
    <members>
        <member name="T:Jitex.Exceptions.JitexNotLoadedException">
            <summary>
            Exception for when Jitex is not loaded.
            </summary>
        </member>
        <member name="T:Jitex.Exceptions.StringNullOrEmptyException">
            <summary>
            Exception for when String is null or empty (string injection)
            </summary>
        </member>
        <member name="M:Jitex.Hook.HookManager.InjectHook(System.IntPtr,System.Delegate)">
            <summary>
            Inject a delegate in memory
            </summary>
            <param name="pointerAddress">Pointer to address method.</param>
            <param name="delToInject">Delegate to be inject.</param>
        </member>
        <member name="P:Jitex.Hook.VTableHook.OriginalAddress">
            <summary>
                Original address
            </summary>
        </member>
        <member name="P:Jitex.Hook.VTableHook.Address">
            <summary>
                New address.
            </summary>
        </member>
        <member name="T:Jitex.Jitex">
            <summary>
            Jitex manager.
            </summary>
        </member>
        <member name="P:Jitex.Jitex.IsLoaded">
            <summary>
            Returns if Jitex is loaded on application. 
            </summary>
        </member>
        <member name="M:Jitex.Jitex.AddMethodResolver(Jitex.JIT.JitexHandler.MethodResolverHandler)">
            <summary>
            Add a method resolver.
            </summary>
            <param name="methodResolver">Method resolver to add.</param>
        </member>
        <member name="M:Jitex.Jitex.AddTokenResolver(Jitex.JIT.JitexHandler.TokenResolverHandler)">
            <summary>
            Add a token resolver.
            </summary>
            <param name="tokenResolver">Token resolver to add.</param>
        </member>
        <member name="M:Jitex.Jitex.RemoveMethodResolver(Jitex.JIT.JitexHandler.MethodResolverHandler)">
            <summary>
            Remove a method resolver.
            </summary>
            <param name="methodResolver">Method resolver to remove.</param>
        </member>
        <member name="M:Jitex.Jitex.RemoveTokenResolver(Jitex.JIT.JitexHandler.TokenResolverHandler)">
            <summary>
            Remove a token resolver.
            </summary>
            <param name="tokenResolver">Token resolver to remove.</param>
        </member>
        <member name="M:Jitex.Jitex.HasMethodResolver(Jitex.JIT.JitexHandler.MethodResolverHandler)">
            <summary>
            If a method resolver is already loaded.
            </summary>
            <param name="methodResolver">Method resolver.</param>
            <returns>True to already loaded. False to not loaded.</returns>
        </member>
        <member name="M:Jitex.Jitex.HasTokenResolver(Jitex.JIT.JitexHandler.TokenResolverHandler)">
            <summary>
            If a token resolver is already loaded.
            </summary>
            <param name="tokenResolver">Token resolver.</param>
            <returns>True to already loaded. False to not loaded.</returns>
        </member>
        <member name="M:Jitex.Jitex.Remove">
            <summary>
            Unload Jitex and modules from application.
            </summary>
        </member>
        <member name="T:Jitex.JitexModule">
            <summary>
            Base class to create a module to Jitex.
            </summary>
        </member>
        <member name="P:Jitex.JitexModule.IsLoaded">
            <summary>
            Return if module is loaded in Jitex.
            </summary>
            <returns>Return <b>true</b> if module is installed and false if not.</returns>
        </member>
        <member name="M:Jitex.JitexModule.#ctor(System.Boolean)">
            <summary>
            Instance a new module.
            </summary>
            <param name="load">If module should be loaded on instance.</param>WWW
        </member>
        <member name="M:Jitex.JitexModule.Load">
            <summary>
            Load module on Jitex (if not already loaded).
            </summary>
        </member>
        <member name="M:Jitex.JitexModule.CompileResolver(Jitex.JIT.Context.MethodContext)">
            <summary>
            Resolver to methods.
            </summary>
            <remarks>
            Capture all methods before compile.
            </remarks>
            <param name="context">Context of Method will be compiled.</param>
        </member>
        <member name="M:Jitex.JitexModule.TokenResolver(Jitex.JIT.Context.TokenContext)">
            <summary>
            Resolver to tokens.
            </summary>
            <remarks>
            Capture all tokens before resolution.
            </remarks>
            <param name="context">Context of Token will be compiled.</param>
        </member>
        <member name="M:Jitex.JitexModule.Dispose">
            <summary>
            Unload module from Jitex.
            </summary>
        </member>
        <member name="T:Jitex.JIT.Context.MethodContext">
            <summary>
            Context for method resolution.
            </summary>
        </member>
        <member name="T:Jitex.JIT.Context.MethodContext.ResolveMode">
            <summary>
            Resolution mode.
            </summary>
        </member>
        <member name="F:Jitex.JIT.Context.MethodContext.ResolveMode.IL">
            <summary>
            MSIL (pre-compile)
            </summary>
        </member>
        <member name="F:Jitex.JIT.Context.MethodContext.ResolveMode.ASM">
            <summary>
            Bytecode (pos-compile)
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.MethodContext.Method">
            <summary>
            Method who will compiled.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.MethodContext.MethodBody">
            <summary>
            Body of method.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.MethodContext.IsResolved">
            <summary>
            If method is already resolved
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.MethodContext.ByteCode">
            <summary>
            Byte-code from method (only to ASM mode)
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.MethodContext.Mode">
            <summary>
            Resolution mode.
            </summary>
            <remarks>
            IL to MSIL
            ASM to byte-code.
            </remarks>
        </member>
        <member name="M:Jitex.JIT.Context.MethodContext.ResolveByteCode(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Resolve method by byte-code.
            </summary>
            <param name="byteCode">Bytecode to inject.</param>
        </member>
        <member name="M:Jitex.JIT.Context.MethodContext.ResolveBody(Jitex.Builder.Method.MethodBody)">
            <summary>
            Resolve method by MethodBody.
            </summary>
            <param name="methodBody">Body of new method.</param>
        </member>
        <member name="M:Jitex.JIT.Context.MethodContext.ResolveMethod(System.Reflection.MethodInfo)">
            <summary>
            Resolve method by MethodInfo.
            </summary>
            <param name="method">Body of new method.</param>
        </member>
        <member name="T:Jitex.JIT.Context.TokenContext">
            <summary>
            Context for token resolution.
            </summary>
        </member>
        <member name="F:Jitex.JIT.Context.TokenContext._resolvedToken">
            <summary>
            Token to be resolved.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.ResolvedToken">
            <summary>
            Token to be resolved. 
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.TokenType">
            <summary>
            Token type.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Scope">
            <summary>
            Address module from token.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Context">
            <summary>
            Address context from token (to generic types).
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.MetadataToken">
            <summary>
            Metadata Token
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Handle">
            <summary>
            Address handle from token
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Module">
            <summary>
            Source module from token.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Source">
            <summary>
            Source from compile tree ("requester compile").
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.IsResolved">
            <summary>
            If context is already resolved.
            </summary>
        </member>
        <member name="P:Jitex.JIT.Context.TokenContext.Content">
            <summary>
            Content from string (only to string).
            </summary>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.#ctor(Jitex.JIT.CorInfo.CORINFO_RESOLVED_TOKEN@,System.Reflection.MemberInfo)">
            <summary>
            Constructor for token type. (non-string)
            </summary>
            <param name="resolvedToken">Original token.</param>
            <param name="source">Source method from compile tree ("requester").</param>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.#ctor(Jitex.JIT.CorInfo.CORINFO_CONSTRUCT_STRING@,System.Reflection.MemberInfo)">
            <summary>
            Constructor for string type.
            </summary>
            <param name="constructString">Original string.</param>
            <param name="source">Source method from compile tree ("requester").</param>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.ResolveFromModule(System.Reflection.Module)">
            <summary>
            Resolve token by module.
            </summary>
            <param name="module">Module containing token.</param>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.ResolveMethod(System.Reflection.MethodBase)">
            <summary>
            Resolve token by method.
            </summary>
            <param name="method">Method to replace.</param>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.ResolveConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Resolve token by constructor.
            </summary>
            <param name="constructor">Constructor to replace.</param>
        </member>
        <member name="M:Jitex.JIT.Context.TokenContext.ResolveString(System.String)">
            <summary>
            Resolve string by content string.
            </summary>
            <param name="content">Content to replace.</param>
        </member>
        <member name="T:Jitex.JIT.ManagedJit">
            <summary>
            Hook instance from JIT.
            </summary>
        </member>
        <member name="F:Jitex.JIT.ManagedJit._compileMethod">
            <summary>
            Custom compíle method.
            </summary>
        </member>
        <member name="F:Jitex.JIT.ManagedJit._resolveToken">
            <summary>
            Custom resolve token.
            </summary>
        </member>
        <member name="F:Jitex.JIT.ManagedJit._constructStringLiteral">
            <summary>
            Custom construct string literal.
            </summary>
        </member>
        <member name="M:Jitex.JIT.ManagedJit.#ctor">
            <summary>
                Prepare custom JIT.
            </summary>
        </member>
        <member name="M:Jitex.JIT.ManagedJit.GetInstance">
            <summary>
            Get singleton instance from ManagedJit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jitex.JIT.ManagedJit.CompileMethod(System.IntPtr,System.IntPtr,Jitex.JIT.CorInfo.CORINFO_METHOD_INFO@,System.UInt32,System.IntPtr@,System.Int32@)">
            <summary>
                Wrap delegate to compileMethod from ICorJitCompiler.
            </summary>
            <param name="thisPtr">this parameter.</param>
            <param name="comp">(IN) - Pointer to ICorJitInfo.</param>
            <param name="info">(IN) - Pointer to CORINFO_METHOD_INFO.</param>
            <param name="flags">(IN) - Pointer to CorJitFlag.</param>
            <param name="nativeEntry">(OUT) - Pointer to NativeEntry.</param>
            <param name="nativeSizeOfCode">(OUT) - Size of NativeEntry.</param>
        </member>
        <member name="M:Jitex.JIT.TokenTls.GetSource">
            <summary>
            Obtém o método que "requisitou" a compilação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jitex.Utils.Memory.AllocateTrampoline(System.IntPtr)">
            <summary>
                Create a trampoline 64 bits.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Jitex.Utils.Memory.FreeTrampoline(System.IntPtr)">
            <summary>
                Free memory trampoline.
            </summary>
            <param name="address"></param>
        </member>
    </members>
</doc>
